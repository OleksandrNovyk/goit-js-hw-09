{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SACZD,SAASC,cAAc,QAiC/C,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAAKC,KACvB,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAI,C,SAAEH,E,MAAUC,IAEhBG,EAAI,C,SAAEJ,E,MAAUC,GAAQ,GAEzBA,EAAM,G,CAxCbL,EAAKa,iBAAiB,UAGtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAQV,MAAAW,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SAEpD,GAAIJ,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EACtDC,EAAAxB,GAASyB,OAAOC,QAAQ,yCAEtB,IAAG,IAAIC,EAAI,EAAGA,EAAIP,EAAOG,MAAOI,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACnB,MAAME,EAASC,OAAOZ,EAAMK,OAASJ,EAAKI,MAAQI,EAElDtB,EAAcuB,EAAUC,GACrBE,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAAxB,GAASyB,OAAOO,QACd,uBAAqB1B,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBiB,EAAAxB,GAASyB,OAAOS,QACd,sBAAoB5B,QAAeC,MAAU,G,CAKvDS,EAAMK,cAAcc,O,IA1BtBhC,SAASiC,KAAKC,MAAMC,gBAAkB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst bodyChangeColor = document.querySelector('body');\n\n\nform.addEventListener('submit', onSubmitForm);\ndocument.body.style.backgroundColor = '#eee0ae';\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        res({ position, delay });\n      } else {\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","res","rej","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","value","$parcel$interopDefault","Notify","warning","i","position1","delays","Number","then","success","catch","failure","reset","body","style","backgroundColor"],"version":3,"file":"03-promises.df32d3f2.js.map"}