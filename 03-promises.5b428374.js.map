{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEAC,SAASC,KAAKC,MAAMC,gBAAkB,UACtC,IAAMC,EAAOJ,SAASK,cAAc,SAC9BC,EAAU,CACdC,SAAU,gBACVC,SAAU,OACVC,aAAc,OACdC,QAAS,IACTC,cAAc,EACdC,kBAAmB,eAKrB,SAASC,EAAcN,EAAUO,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAET,WAAUO,UAEpBG,EAAO,CAAEV,WAAUO,S,GAEpBA,E,IAXPV,EAAKkB,iBAAiB,UAetB,SAAsBC,GACpBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACrB,GAAIF,EAAMG,MAAQ,GAAKF,EAAKE,MAAQ,GAAKD,EAAOC,MAAQ,EACtDC,EAAAlC,GAASmC,OAAOC,QAAS,yCAEvB,IAAG,IAAIC,EAAI,EAAGA,EAAIL,EAAOC,MAAOI,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACbE,EAASC,OAAOV,EAAMG,OAASF,EAAKE,MAAQI,EAElDtB,EAAcuB,EAAUC,GACrBE,MAAK,SAAAC,G,IAAGjC,EAAQiC,EAARjC,SAAUO,EAAK0B,EAAL1B,MACjBkB,EAAAlC,GAASmC,OAAOQ,QACd,uBAAwCC,OAAfnC,EAAS,QAAYmC,OAAN5B,EAAM,MAAKR,E,IAGtDqC,OAAM,SAAAH,G,IAAGjC,EAAQiC,EAARjC,SAAUO,EAAK0B,EAAL1B,MAClBkB,EAAAlC,GAASmC,OAAOW,QACd,sBAAqCF,OAAfnC,EAAS,QAAYmC,OAAN5B,EAAM,MAAKR,E,IAK1DiB,EAAMG,cAAcmB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\ndocument.body.style.backgroundColor = '#eee0ae';\nconst form = document.querySelector('.form');\nconst options = {\n  position: 'center-bottom',\n  distance: '15px',\n  borderRadius: '15px',\n  timeout: 8000,\n  clickToClose: true,\n  cssAnimationStyle: 'from-bottom',\n};\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`, options\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`, options\n          );\n        });\n    }\n  }\n  event.currentTarget.reset();\n}\n\n"],"names":["$6JpON","parcelRequire","document","body","style","backgroundColor","$ce04d3a99e08e73b$var$form","querySelector","$ce04d3a99e08e73b$var$options","position","distance","borderRadius","timeout","clickToClose","cssAnimationStyle","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","value","$parcel$interopDefault","Notify","warning","i","position1","delays","Number","then","param","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.5b428374.js.map"}